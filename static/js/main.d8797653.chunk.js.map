{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","host","App","state","text","getPosts","axios","get","then","res","posts","data","setState","handleChange","medium","createPost","post","content","console","log","deletePost","postId","delete","this","src","alt","width","className","style","paddingLeft","paddingRight","paddingBottom","paddingTop","fontSize","map","Card","Header","id","Button","variant","onClick","Body","Text","dangerouslySetInnerHTML","__html","minHeight","onChange","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uUAMAA,EAAQ,IACRA,EAAQ,IACR,IAAMC,EAAO,gCA6EEC,E,2MA3EbC,MAAQ,CACNC,KAAM,mB,EAGRC,SAAW,WACTC,IAAMC,IAAN,UAAaN,EAAb,WACGO,MAAK,SAAAC,GACJ,IAAMC,EAAQD,EAAIE,KAClB,EAAKC,SAAS,CAAEF,c,EAQtBG,aAAe,SAACT,EAAMU,GACpB,EAAKF,SAAS,CAAER,KAAMA,K,EAGxBW,WAAa,WACXT,IAAMU,KAAN,UAAcf,EAAd,UAA4B,CAAEgB,QAAS,EAAKd,MAAMC,OAC/CI,MAAK,SAAAC,GACJS,QAAQC,IAAIV,MAEbD,MAAK,kBAAM,EAAKH,e,EAGrBe,WAAa,SAACC,GACZf,IAAMgB,OAAN,UAAgBrB,EAAhB,kBAA8BoB,IAC3Bb,MAAK,SAAAC,GACJS,QAAQC,IAAIV,MAEbD,MAAK,kBAAM,EAAKH,e,mFApBnBkB,KAAKlB,a,+BAuBG,IAAD,OACCK,EAAUa,KAAKpB,MAAfO,MACR,OACE,6BACA,yBAAKc,IAAI,kCAAkCC,IAAI,WAAWC,MAAM,SAChE,yBAAKC,UAAU,MAAMC,MAAO,CAC1BC,YAAa,MAAOC,aAAc,MAChCC,cAAe,QAASC,WAAY,SAExC,wBAAIJ,MAAO,CAACK,SAAU,KAAMF,cAAe,SAA3C,YACA,qCACCrB,GAASA,EAAMwB,KAAI,SAAClB,GAAD,OACjB,kBAACmB,EAAA,EAAD,KACC,kBAACA,EAAA,EAAKC,OAAN,cAAoBpB,EAAKqB,GACvB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOC,QAAS,kBAAM,EAAKpB,WAAWJ,EAAKqB,MAA3D,WAEF,kBAACF,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,KAAN,KACF,uBAAGC,wBAAyB,CAACC,OAAQ5B,EAAKC,iBAK5C,2CACA,kBAAC,IAAD,CAAQW,MAAO,CAACiB,UAAW,SAAUzC,KAAMmB,KAAKpB,MAAMC,KAAM0C,SAAUvB,KAAKV,eAC3E,kBAACyB,EAAA,EAAD,CAAQE,QAASjB,KAAKR,YAAtB,UAEF,6BACA,6BACA,6BACE,kBAACuB,EAAA,EAAD,CAAQC,QAAQ,OAAOQ,KAAK,uCAA5B,wBACA,kBAACT,EAAA,EAAD,CAAQC,QAAQ,OAAOQ,KAAK,+CAA5B,6B,GApEUC,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,MAAK,SAAAsD,GACjCA,EAAaC,kB","file":"static/js/main.d8797653.chunk.js","sourcesContent":["import React from 'react';\nimport Editor from 'react-medium-editor';\nimport './App.css';\n// import request from 'request';\nimport { Button, Card } from 'react-bootstrap';\nimport axios from 'axios';\nrequire('medium-editor/dist/css/medium-editor.css');\nrequire('medium-editor/dist/css/themes/default.css');\nconst host = 'https://home.stasbar.com:9999'\nclass App extends React.Component {\n  state = {\n    text: \"Enter post here\",\n  }\n\n  getPosts = () => {\n    axios.get(`${host}/posts`)\n      .then(res => {\n        const posts = res.data;\n        this.setState({ posts });\n      })\n  }\n\n  componentDidMount() {\n    this.getPosts();\n  }\n\n  handleChange = (text, medium) => {\n    this.setState({ text: text });\n  }\n\n  createPost = () => {\n    axios.post(`${host}/posts`, { content: this.state.text })\n      .then(res => {\n        console.log(res);\n      })\n      .then(() => this.getPosts());\n  }\n\n  deletePost = (postId) => {\n    axios.delete(`${host}/posts/${postId}`)\n      .then(res => {\n        console.log(res);\n      })\n      .then(() => this.getPosts());\n  }\n\n  render() {\n    const { posts } = this.state;\n    return (\n      <div>\n      <img src=\"https://i.imgur.com/GAAhJ7v.jpg\" alt=\"Stallman\" width=\"100%\"/>\n      <div className=\"App\" style={{\n        paddingLeft: '20%', paddingRight: '20%',\n          paddingBottom: '100px', paddingTop: '40px'}} >\n\n      <h1 style={{fontSize: '36', paddingBottom: '30px'}}>MOZERMAN</h1>\n      <h1>Posts</h1>\n      {posts && posts.map((post) => \n        (<Card>\n          <Card.Header>Post #{post.id}\n            <Button variant=\"link\" onClick={() => this.deletePost(post.id)}>Delete</Button>\n          </Card.Header>\n          <Card.Body>\n            <Card.Text>\n          <p dangerouslySetInnerHTML={{__html: post.content}} />\n            </Card.Text>\n          </Card.Body>\n        </Card>)\n      )}\n        <h1>Create post</h1>\n        <Editor style={{minHeight: '200px'}} text={this.state.text} onChange={this.handleChange}  />\n        <Button onClick={this.createPost}>Create</Button>\n\n      <br/>\n      <br/>\n      <br/>\n        <Button variant=\"link\" href=\"https://github.com/stasbar/mozerpol\">Frontend open source</Button>\n        <Button variant=\"link\" href=\"https://github.com/stasbar/mozerpol-backend\">Backend open source</Button>\n      </div>\n      </div>\n    );\n  }\n\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}